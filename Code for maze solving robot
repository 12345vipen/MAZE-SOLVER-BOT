//definig motors pins 
int D0=12; 
int D1=5;
int D2=4;
int D3=2;
int D4=7;
int l1;
int l2;
int l3;
int l4;
int l5;
int b=0; // for counting number of turnaround in the path
//int ENA=3;
//int ENB=6;
//define motors 
int leftMotor1=10;   //brown
int leftMotor2=9 ;//yellow
int rightMotor1=8 ; //greyint 
int rightMotor2=11 ; //red
char path[100] = {};
int pathLength;
void setup() {
  // put your setup code here, to run once:
  pinMode(D0,INPUT);
  pinMode(D1,INPUT);
  pinMode(D2,INPUT);
  pinMode(D3,INPUT);
  pinMode(D4,INPUT);
  pinMode(8,OUTPUT);
  pinMode(9,OUTPUT);
  pinMode(10,OUTPUT);
  pinMode(11,OUTPUT);
  //pinMode(ENA,OUTPUT);
 //pinMode(ENB,OUTPUT);

  Serial.begin(9600);
}
void loop()
{
  
readsensor();
if(l3==1 && l1==0 && l2==0 && l4==0 && l5==0)
{
  forward();
  }
  else
  {
    left_hand_wall();
    }
  }
void readsensor() //this function will read all sensor values when called in the loop function
    {
       l1=digitalRead(D0);
       l2=digitalRead(D1);
       l3=digitalRead(D2);
       l4=digitalRead(D3);
       l5=digitalRead(D4);
      }
  // main paragraph of the full code algorith of this code
  void left_hand_wall()
  {
    if(l3==1 && l1==1 && l2==1 && l4==1 && l5==1) // at the T point it turns left
    {
      turnLeft();
      delay(500);
      readsensor();
      if(l3==1 && l1==1 && l2==1 && l4==1 && l5==1)
      {
        done();
        }
        else
        {
          forward();
          }
      }
      else if(l3==0 && l1==0 && l2==0 && l4==0 && l5==0) // at dead end it turns back around
      {
        turnaround();
        }
        else if(l3==0 && l1==0 && l2==1 && l4==1 && l5==1) // go straight because you have 2 options right or straight straight because we are following the left hand algo
        {
          forward();
          }    
          else if(l3==0 && l1==0 && l2==1 && l4==1 && l5==1)
          {
            turnLeft();
            }
    }
    
  void forward()
  {
    analogWrite(leftMotor1,100);
    analogWrite(leftMotor2,0);
  analogWrite(rightMotor1,100);
  analogWrite(rightMotor2,0);
  path[pathLength] = 'S';
    pathLength++;
    }
    void done()
{
  analogWrite(leftMotor1,0);
    analogWrite(leftMotor2,0);
  analogWrite(rightMotor1,0);
  analogWrite(rightMotor2,0);
  
  // how to add the PUSH BUTTON HERE
  //remember to add push button here
 
  for(int i=0;i<100;i++)
  {
    if(path[i]=='B' && path[i-1]=='L' && path[i+1]=='R')
    {
     path[i]='B';
     for(int k =i+2 ; k<100 ; k++)
            {
            path[k-2] = path[k];
        }
      }
      else if(path[i]=='B' && path[i-1]=='L' && path[i+1]=='S')
    {
     path[i]='R';
     for(int k =i+2 ; k<100 ; k++)
            {
            path[k-2] = path[k];
        }
      }
      else if(path[i]=='B' && path[i-1]=='R' && path[i+1]=='L')
    {
     path[i]='B';
     for(int k =i+2 ; k<100 ; k++)
            {
            path[k-2] = path[k];
        }
      }
      else if(path[i]=='B' && path[i-1]=='S' && path[i+1]=='L')
    {
     path[i]='R';
     for(int k =i+2 ; k<100 ; k++)
            {
            path[k-2] = path[k];
        }
      }
      else if(path[i]=='B' && path[i-1]=='S' && path[i+1]=='S')
    {
     path[i]='B';
     for(int k =i+2 ; k<100 ; k++)
            {
            path[k-2] = path[k];
        }
      }
      else if(path[i]=='B' && path[i-1]=='L' && path[i+1]=='L')
    {
     path[i]='S';
     for(int k =i+2 ; k<100 ; k++)
            {
            path[k-2] = path[k];
        }
      }
    }
    for(int j=0;j<100;j++)
    {
      if(path[j]=='L')
      {
        turnLeft();
        }
        else if(path[j]=='R')
        {
          turnRight();
          }
          else if(path[j]=='S')
          {
            forward();
            }
            else if(path[j]=='B')
            {
              turnaround();
              }
          
      }
    
    
}
void turnLeft()
{
  analogWrite(leftMotor1,0);
  analogWrite(leftMotor2,100);
  analogWrite(rightMotor1,100);
  analogWrite(rightMotor2,0);
  path[pathLength] = 'L';
  pathLength++;
}
void turnRight()
{
  analogWrite(leftMotor1,100);
  analogWrite(leftMotor2,0);
  analogWrite(rightMotor1,0);
  analogWrite(rightMotor2,100);
  path[pathLength] = 'R';
  pathLength++;
}
void turnaround()
{
    analogWrite(leftMotor1,0);
  analogWrite(leftMotor2,0);
  analogWrite(rightMotor1,100);
  analogWrite(rightMotor2,0);
  path[pathLength] = 'B';
  pathLength++;
  }
 
